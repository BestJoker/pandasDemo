# coding:utf-8import pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltimport seaborn as snsimport datetimepd.options.mode.chained_assignment = None # 默认是'warn'plt.rcParams['font.sans-serif']=['Microsoft YaHei'] #用来正常显示中文标签字体。Microsoft YaHei 或 SimHeiplt.rcParams['axes.unicode_minus']=False #用来正常显示负号'''一.处理数据，观察数据user_ud:用户IDorder_dt: 购买日期order_products: 购买产品数order_amount: 购买金额'''def get_oring_data():    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    path = os.path.join(PROJECT_ROOT,'data/CDNOW_master.txt')    columns = ['user_id','order_dt','order_products','order_amount']    #\s+：匹配任意空白字符    orign_data = pd.read_csv(path, names=columns, sep='\s+')    #将日期转化为datetime格式    orign_data['order_dt'] = pd.to_datetime(orign_data.order_dt,format='%Y%m%d')    # 下面按照月份分析，所以需添加一个字段month，用它来表示订单日期所在的月份，格式为月份的第一天    # orign_data['month'] = orign_data['order_dt'].apply(lambda x:x.month)    orign_data['month'] = orign_data.order_dt.values.astype('datetime64[M]')    print (orign_data.head())    print (orign_data.info())    #没有缺失值,重复也正常    print (orign_data.groupby(by='user_id').sum().describe())    # 观察数据, 从用户ID看，每位用户平均购买7张CD，最多的用户购买了1033张，属于狂热用户了(观察异常值)。用户的平均消费金额（客单价）106    # 元，标准差是240，结合分位数和最大值看，平均值略大于第三分位数，肯定存在小部分的高额消费用户。    return orign_data'''二.数据分析'''# 1.按月分析用户消费趋势：每月消费总金额，每月订单数，每月消费产品购买量，每月用户数变化def analysis_1(df):    temp_df = df.copy()    grouped = temp_df.groupby(by='month')    fig = plt.figure(figsize=(25,15),dpi=80)    ax1 = fig.add_subplot(4,2,1)    ax2 = fig.add_subplot(4,2,3)    ax3 = fig.add_subplot(4,2,5)    ax4 = fig.add_subplot(4,2,7)    ax5 = fig.add_subplot(2,2,2)    ax6 = fig.add_subplot(2,2,4)    ax1.plot(grouped['order_amount'].sum(),color='blue')    ax1.set_title('每月消费总金额')    ax2.plot(grouped['order_products'].count(),color='red')    ax2.set_title('每月订单数')    ax3.plot(grouped['order_products'].sum(),color='green')    ax3.set_title('每月消费产品数量')    ax4.plot(grouped['user_id'].apply(lambda x:len(x.drop_duplicates())),color='black')    ax4.set_title('每月用户数变化')    ax5.plot(grouped['order_amount'].sum() / grouped['user_id'].apply(lambda x:len(x.drop_duplicates())),color='red')    ax5.set_title('每月用户消费的平均金额')    ax6.plot(grouped['order_products'].count() / grouped['user_id'].apply(lambda x:len(x.drop_duplicates())),color='blue')    ax6.set_title('每月用户消费的平均次数')    plt.show()    ##数据透视查看，按月分别对用户购买金额求和，订单数求和，用户人数计数    result_df = pd.pivot_table(temp_df,index='month',values=['order_amount','order_products','user_id'],aggfunc={'order_products':'sum','order_amount':'sum','user_id':'count'})# 2.用户个体消费分析def analysis_2(df):    temp_df = df.copy()    grouped_user = temp_df.groupby(by='user_id')    print (grouped_user.sum().describe())    #用户消费金额和消费次数散点图    plt.scatter(temp_df['order_amount'],temp_df['order_products'],s=5,alpha=0.5)    plt.title('订单散点图')    plt.grid(True)    plt.show()    # 每位用户的消费金额与消费商品数散点图,并用query过滤掉订单金额大于4000的订单，减小极值干扰    grouped_user.sum().query('order_amount<4000').plot.scatter(x='order_amount',y='order_products')    plt.show()    #用户消费金额的分布图(符合二八法则)    grouped_user.sum().order_amount.plot.hist(bins=20)    plt.show()    # 过滤掉商品数大于100的订单，减小极值影响，消费金额分布图    grouped_user.sum().query('order_products<100').order_amount.hist(bins=40)    plt.title('消费金额分布图')    plt.show()    # 按ID分组,并求和,再对订单金额进行排序(默认从小到大),最后通过匿名函数对每一行进行累计求和占比    print (grouped_user.sum().sort_values('order_amount'))    user_cumsum = grouped_user.sum().sort_values('order_amount').apply(lambda x:x.cumsum() / x.sum())    print (user_cumsum)    plt.subplot(211)    user_cumsum.reset_index().order_amount.plot(figsize=(8,8))    plt.title('消费金额累计百分比')    plt.grid()    plt.subplot(212)    user_cumsum.reset_index().order_products.plot()    plt.title('消费商品数累计百分比')    plt.grid()    plt.show()# 3. 用户消费行为分析def analysis_3(df):    temp_df = df.copy()    #第一次购买时间分布    if __name__ == '__main__':    orign_df = get_oring_data()    analysis_3(orign_df)