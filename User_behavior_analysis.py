# coding:utf-8import pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltimport seaborn as snsimport datetimepd.options.mode.chained_assignment = None # 默认是'warn'plt.rcParams['font.sans-serif']=['Microsoft YaHei'] #用来正常显示中文标签字体。Microsoft YaHei 或 SimHeiplt.rcParams['axes.unicode_minus']=False #用来正常显示负号#获取原始数据,return 数据+是否处理后def get_orign_data():    #处理后数据    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    handle_path = os.path.join(PROJECT_ROOT, 'data/behavior_handled.txt')    # 如果有已经处理好的数据，那就直接读取，如果没有，则读取原始数据进行处理    try:        handle_df = pd.read_csv(handle_path, sep='\t')    except IOError:        print('没有处理过的数据，读取原始数据')        path = os.path.join(PROJECT_ROOT, 'data/behavior.txt')        # 我使用txt文件是以tab键分隔的，故sep=‘\t’        orign_df = pd.read_csv(path, sep='\t')        print (orign_df.info())        return orign_df,False    else:        print ('数据已经处理过，直接读取')        handle_df = pd.read_csv(handle_path, sep='\t')        return handle_df,True#处理元数据def handle_data(df):    #保留一份原始数据    temp_df = df.copy()    #1.观察数据    print (temp_df.head())    #2.检查是否有重复数据 - 没有    print (temp_df.duplicated().value_counts())    #3.处理时间，转化为访问网站的具体时间，月份，日期，每天几点    temp_df['time1'] = temp_df['time'].apply(lambda x:datetime.datetime.fromtimestamp(x))    temp_df['month'] = temp_df['time'].apply(lambda x: int(datetime.datetime.fromtimestamp(x).strftime('%Y%m')))    temp_df['date'] = temp_df['time'].apply(lambda x: datetime.datetime.fromtimestamp(x).strftime('%Y%m%d'))    temp_df['hour'] = temp_df['time1'].apply(lambda x:x.hour)    #4.销售金额计算    temp_df['money'] = temp_df['price']*temp_df['amount']    #5.缺失值处理：观看有没有缺失值    print (temp_df.isnull().sum())    #6.观察数据有没有异常值    print (temp_df.describe())    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    handle_path = os.path.join(PROJECT_ROOT, 'data/behavior_handled.txt')    temp_df.to_csv(handle_path, sep='\t', index=False)    print ('成功保存处理完数据')    return temp_df'''用户行为分析'''# 1.pv/uv 按天分析，观察其访问走势def behavior_analysis_1(df):    temp_df = df.copy()    pv_df = temp_df[temp_df['behavior']=='pv']['date'].value_counts().to_frame(name='pv')    uv_df = temp_df[['user_id','date']].drop_duplicates()['date'].value_counts().to_frame(name='uv')    result_df = pd.merge(pv_df,uv_df,left_index=True,right_index=True).sort_index(ascending=True)    result_df['avg_pv'] = result_df['pv'] / result_df['uv']    result_df.index.name = 'date'    result_df.index = result_df.index.astype(str)    print (result_df)    fig,axes = plt.subplots(1,3,figsize=(18,3))    color_array = ['blue','green','red']    for i in range(len(result_df.columns)):        column = result_df.columns[i]        axes[i].plot(result_df.index,result_df[column],color=color_array[i],marker='o')        axes[i].set_title(column)    plt.show()if __name__ == '__main__':    data_df,handled = get_orign_data()    #如果是未处理过的，则进行数据处理    if handled == False:        data_df = handle_data(data_df)    print (data_df.info())    behavior_analysis_1(data_df)