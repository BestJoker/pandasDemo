# coding:utf-8import pandas as pdimport numpy as npfrom pyecharts.charts import Barimport matplotlib.pyplot as pltfrom pyecharts import options as opts#### '''# InitOpts：初始化配置项# # 图表画布宽度，css 长度单位。# width: str = "900px",## # 图表画布高度，css 长度单位。# height: str = "500px",## # 图表 ID，图表唯一标识，用于在多图表时区分。# chart_id: Optional[str] = None,## # 渲染风格，可选 "canvas", "svg"# # # 参考 `全局变量` 章节# renderer: str = RenderType.CANVAS,## # 网页标题# page_title: str = "Awesome-pyecharts",## # 图表主题# theme: str = "white",## # 图表背景颜色# bg_color: Optional[str] = None,## # 远程 js host，如不设置默认为 https://assets.pyecharts.org/assets/"# # 参考 `全局变量` 章节# js_host: str = "",## # 画图动画初始化配置，参考 `global_options.AnimationOpts`# animation_opts: Union[AnimationOpts, dict] = AnimationOpts(),# '''#### '''# 全局配置项，set_global_opts()函数可设置配置项如下：# title_opts——标题# legend_opts——图例# tooltip_opts——​提示框# toolbox_opts——工具箱# brush_opts——区域选择组件# xaxis_opts——​X轴# yaxis_opts——Y轴# visualmap_opts——视觉映射# datazoom_opts——​区域缩放# graphic_opts——原生图形元素组件# axispointer_opts——坐标轴指示器# '''### '''# 一、标题配置项：title_opts## title——主标题文本，支持使用 \n 换行# title_link——主标题跳转 URL 链接# title_target——主标题跳转链接方式，默认值是: blank。可选参数:'self', 'blank'。'self'当前窗口打开; 'blank' 新窗口打开# subtitle——副标题文本，支持使用 \n 换行。# pos_left、pos_right、pos_top、pos_bottom——grid 组件离容器左侧的距离。值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。# left也可以是 'left', 'center', 'right'。如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。# top 也可以是'top', 'middle', 'bottom'。如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。# padding——标题内边距，单位px，默认各方向内边距为5，接受数组分别设定上右下左边距。# item_gap——主副标题之间的间距。# '''### '''# 二、标题配置项：legend_opts## type_——图例的类型，可选值：plain普通图例scroll可滚动翻页图例。# selected_mode——控制是否可以通过点击图例改变系列的显示状态，默认开启。也可以设成“single”、“multiple”使用单选或多选模式。# is_show——是否显示图例组件# orient——图例列表的布局朝向，可选“horizontal”、“vertical”# pos_left、pos_right、pos_top、pos_bottom——grid 组件离容器左侧的距离。值可以是像 20 这样的具体像素值，可以是像 '20%' 这样相对于容器高宽的百分比。left也可以是 'left', 'center', 'right'。top 也可以是'top', 'middle', 'bottom'。如果 left 的值为'left', 'center', 'right'，组件会根据相应的位置自动对齐。如果 top 的值为'top', 'middle', 'bottom'，组件会根据相应的位置自动对齐。# padding——图例内边距，单位px，默认各方向内边距为5。# item_gap——图例之间的间距。# '''### '''# 三、提示框：tooltip_opts## is_show：是否显示提示框组件，包括提示框浮层和 axisPointer。# trigger_on：提示框触发的条件，可选：「mousemove」: 鼠标移动时触发。click': 鼠标点击时触发。'mousemove|click': 同时鼠标移动和点击时触发。'none':不在 'mousemove' 或 'click' 时触发，# axis_pointer_type：指示器类型。可选'line'：直线指示器、'shadow'：阴影指示器、'none'：无指示器、'cross'：十字准星指示器。其实是种简写，表示启用两个正交的轴的 axisPointer。# background_color：提示框浮层的背景颜色。# border_color：提示框浮层的边框颜色。# border_width：提示框浮层的边框宽。# '''### '''# 四、xaxis_opts——​X轴## is_sho：是否显示提示框组件，包括提示框浮层和 axisPointer。# type：坐标轴类型。可选：'value': 数值轴，适用于连续数据。'category': 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。'time': 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。'log' 对数轴。适用于对数数据。# name：坐标轴名称。# is_inverse：是否反向坐标轴。# name_location：坐标轴名称显示位置。可选：# name_gap：坐标轴名称与轴线之间的距离。# name_rotate：坐标轴名字旋转，角度值。# max_interval：自动计算的坐标轴最大间隔大小。# '''####bar = (    Bar(        opts.InitOpts(            animation_opts=opts.AnimationOpts(                animation=True,                animation_duration=1000,                animation_threshold=2000,                animation_duration_update=30,                animation_delay=0            ),            width='900px',            height='500px',            page_title='教学篇',            theme='dark'        )    )    .add_xaxis(["美国折耳猫", "虎斑猫", "绅士猫", "波斯猫", "加菲猫", "老鼠"])    .add_yaxis("宠物店A", [5, 20, 36, 10, 75, 90])    .add_yaxis('宠物店B',[10,25,36,10,60,20])    .set_global_opts(        title_opts=opts.TitleOpts(                title='这是主标题',                title_link = 'https://www.bardu.com',                subtitle='副标题',                pos_left='10%'        ),        legend_opts=opts.LegendOpts(            is_show=True,            type_='scroll',            orient='vertical'),        tooltip_opts=opts.TooltipOpts(            is_show = True,            trigger = 'axis',            trigger_on = 'mousemove',            axis_pointer_type = 'cross',            border_color = '#FF0000',            border_width = 0.5        ),        xaxis_opts=opts.AxisOpts(            is_show = True,            name = '横坐标',            is_inverse = False,            name_location='middle',            name_gap = 20        ),        yaxis_opts=opts.AxisOpts(            is_show=True,            name = '纵坐标轴',            is_inverse = False,            name_location = 'middle',            name_gap = 10        ),        toolbox_opts=opts.ToolboxOpts(            is_show = True,            orient = 'vertical',            pos_left='90%',            feature = opts.ToolBoxFeatureOpts(                save_as_image = opts.ToolBoxFeatureSaveAsImageOpts(                    type_='png',                    name='保存图片',                    title='保存成功',                    is_show=True,                    pixel_ratio=1                ),                restore=opts.ToolBoxFeatureRestoreOpts(is_show=False),                data_view=opts.ToolBoxFeatureDataViewOpts(is_show=False),                data_zoom=opts.ToolBoxFeatureDataZoomOpts(is_show=False),                # brush=opts.ToolBoxFeatureBrushOpts(is_show=False),                magic_type=opts.ToolBoxFeatureMagicTypeOpts(is_show=True)            )        )    )    .set_series_opts(        label_opts=opts.LabelOpts(            is_show=True,            position='top',            distance=30,            font_size=14,            rotate=0        ),        markpoint_opts=opts.MarkPointOpts(            symbol='pin',            data=[                opts.MarkPointItem(type_='max',name='最大值',value_index=1),                opts.MarkPointItem(type_='min',name='最小值',value_index=1),                opts.MarkPointItem(type_='average',name='平均值')            ]        ),        markline_opts=opts.MarkLineOpts(            is_silent=True,            data=[                opts.MarkLineItem(type_='min',name='最小值'),                opts.MarkLineItem(type_='max',name='最大值'),                opts.MarkLineItem(type_='average',name='平均值')            ]        )    )    .render('mycharts.html'))print ('aaa')