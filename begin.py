# coding:utf-8import pandas as pdimport numpy as npimport osfrom datetime import datetime,date,timedelta# import time#字段映射表totoal_columns_dic = {    '页面uv' : '页面访问UV',    '填写报名申请总数' : '报名申请企业数',    '已经领取企业数量' : '联名企业数',    '课包领取-新增注册用户数' : '新注册用户数',    '成功领取人数' : '领取课程总用户数',    '领取看课人数' : '上课用户数'}#关于访问页面转化漏斗字段array = [         '页面访问UV',         '报名申请企业数',         '页面->报名企业转化率',         '联名企业数',         '报名申请->联名企业转化率',         '领取课程总用户数',         '新注册用户数',         '上课用户数',         '上课转化率',         '课包内人均观看时长',         '课包外人均观看时长'         ]def totalSheet(total_df_1,total_df_2,total_learn_df_1,total_learn_df_2):    #处理一下对应的columns    print (array)    result_df = pd.DataFrame(columns=array)    #1.拼接总计数据    result_df = pd.concat([result_df,total_df_1],join_axes=[result_df.columns])    #2.拼接当日数据到result数据中    result_df = pd.concat([result_df,total_df_2],join_axes=[result_df.columns])    # 重命名index    last_date = (date.today() + timedelta(days=-1)).strftime("%m-%d")  # 昨天日期    date_str = '当日' + '（' + last_date + '）'    index = ['累计',date_str]    result_df.index = index    print (result_df)    #3.添加'领取课程总用户数','上课用户数','课包内人均观看时长','课包外人均观看时长'    result_df.loc[index[0],'领取课程总用户数'] = total_learn_df_1.loc[0,'成功领取人数']    result_df.loc[index[1],'领取课程总用户数'] = total_learn_df_2.loc[0,'成功领取人数']    result_df.loc[index[0],'上课用户数'] = total_learn_df_1.loc[0,'领取看课人数']    result_df.loc[index[1],'上课用户数'] = total_learn_df_2.loc[0,'领取看课人数']    result_df.loc[index[0],'课包内人均观看时长'] = total_learn_df_1.loc[0,'课包内人均观看时长']    result_df.loc[index[1],'课包内人均观看时长'] = total_learn_df_2.loc[0,'课包内人均观看时长']    result_df.loc[index[0],'课包外人均观看时长'] = total_learn_df_1.loc[0,'课包外人均观看时长']    result_df.loc[index[1],'课包外人均观看时长'] = total_learn_df_2.loc[0,'课包外人均观看时长']    print (result_df[['上课用户数','领取课程总用户数','课包内人均观看时长','课包外人均观看时长']])    #计算对应转化率    result_df['页面->报名企业转化率'] = (result_df['报名申请企业数'].astype(np.int64) / result_df['页面访问UV'].astype(np.int64)).apply(lambda x: format(x,'.2%'))    result_df['报名申请->联名企业转化率'] = (result_df['联名企业数'].astype(np.int64) / result_df['报名申请企业数'].astype(np.int64)).apply(lambda x: format(x,'.2%'))    result_df['上课转化率'] = (result_df['上课用户数'].astype(np.int64) / result_df['领取课程总用户数'].astype(np.int64)).apply(lambda x: format(x,'.2%'))    return result_dfdef begin():    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    #1.获取总计数据    total_path_1 = os.path.join(PROJECT_ROOT, 'data/企业报名漏斗-累计.xlsx')    total_df_1 = pd.read_excel(total_path_1)    total_df_1 = total_df_1.rename(columns=totoal_columns_dic)    print (total_df_1)    #2.获取昨日数据    total_path_2 = os.path.join(PROJECT_ROOT, 'data/企业报名漏斗-当日.xlsx')    total_df_2 = pd.read_excel(total_path_2)    total_df_2 = total_df_2.rename(columns=totoal_columns_dic)    print (total_df_2)    #3.获取领取学习情况累计数据    total_learn_path_1 = os.path.join(PROJECT_ROOT, 'data/领取学习情况-累计.xlsx')    total_learn_df_1 = pd.read_excel(total_learn_path_1)    #倒叙排列一下，防止数据错误，取最新的一行    total_learn_df_1 = total_learn_df_1.sort_values(by='时间',ascending=False)[0:1]    print (total_learn_df_1)    #4.获取领取学习情况昨日数据    total_learn_path_2 = os.path.join(PROJECT_ROOT, 'data/领取学习情况-当日.xlsx')    total_learn_df_2 = pd.read_excel(total_learn_path_2)    total_df = totalSheet(total_df_1, total_df_2, total_learn_df_1, total_learn_df_2)    print (total_df)    print (total_df.columns)    result_path = os.path.join(PROJECT_ROOT, 'data/总计.xlsx')    writer = pd.ExcelWriter(result_path)    total_df.to_excel(excel_writer=writer, sheet_name='总数')    writer.save()    writer.close()