# coding:utf-8import pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltfrom pylab import mplfrom wordcloud import WordCloudPROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))#获取项目根目录path = os.path.join(PROJECT_ROOT,"Pandas_exercises-master/DataAnalyst.xlsx") #文件路径df = pd.read_excel(path)print (df.info())print ('-'*30)#####数据清洗#查看重复print (len(df.positionId.unique()),df.positionId.unique().size)#去掉重复值df_duplicates = df.drop_duplicates(subset='positionId',keep='first')print (df_duplicates.head(10))print (df_duplicates.salary.value_counts())def cut_word(word,method):    position = word.find('-')    length = len(word)    #找到了'-'    if position != -1:        bottomSalary = word[:position-1]        topSalary = word[position+1:length-1]    else:        bottomSalary = word[:word.upper().find('K')]        topSalary = bottomSalary    if method == 'bottom':        return bottomSalary    else:        return topSalary#获取最高和最低工资df_duplicates['bottomSalary'] = df_duplicates.salary.apply(cut_word,method='bottom').astype('int')df_duplicates['topSalary'] = df_duplicates.salary.apply(cut_word,method='top').astype('int')#将工资转化为数字df_duplicates['avgSalary'] = (df_duplicates['bottomSalary'] + df_duplicates['topSalary']) / 2df_clean = df_duplicates[['city','companyShortName','companySize','education','positionName','positionLables','workYear','avgSalary']]print (df_clean.head())#####数据分析和可视化#1.【哪个城市招聘的数据师最多】数据中可以看出北京招聘的数据师是对多的。print (df_clean.city.value_counts())print (df_clean.describe())plt.style.use('ggplot')mpl.rcParams['font.sans-serif'] = ['FangSong'] # 指定默认字体mpl.rcParams['axes.unicode_minus'] = False # 解决保存图像是负号'-'显示为方块的问题def topN(df,n=5):    counts = df.value_counts()    return counts.sort_values(ascending=False)[:n]print (df_clean.groupby(by='city').companyShortName.apply(topN))df_clean.groupby(by='city').mean().plot.bar()# plt.show()df_clean.groupby(by=['city','education']).mean().unstack().plot.bar(figsize=(9,7))# plt.show()bins = [0,3,5,10,15,20,30,100]level = ['0~3','3~5','5~10','10~15','15~20','20~30','30+']df_clean['level'] = pd.cut(df_clean['avgSalary'],bins,labels=level)print (df_clean[['avgSalary','level']])df_level = df_clean.groupby(by=['city','level']).avgSalary.count().unstack()print (df_level)df_level_prop = df_level.apply(lambda x:x/x.sum(),axis=1)print (df_level_prop)df_level_prop.plot.bar(stacked=True,figsize=(14,6))# plt.show()#去除空格键word = df_clean.positionLables.str[1:-1].str.replace(' ','')print (word)df_word = word.dropna().str.split(',').apply(pd.value_counts)df_word_counts = df_word.unstack().dropna().reset_index().groupby('level_0').count()print (df_word_counts)#清洗掉引号df_word_counts.index = df_word_counts.index.str.replace("'",'')font_path="/System/Library/fonts/PingFang.ttc"wordcloud = WordCloud(font_path=font_path,width=900,height=400,background_color='white')f,axs = plt.subplots(figsize=(15,15))wordcloud.fit_words(df_word_counts.level_1)axs = plt.imshow(wordcloud)plt.axis('off')plt.show()# wordcloud.to_file('dataAnalyst.png')