import pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltimport scipy.stats as stimport mathimport seaborn as snspd.options.mode.chained_assignment = None # 默认是'warn'plt.rcParams['font.sans-serif']=['Microsoft YaHei'] #用来正常显示中文标签字体。Microsoft YaHei 或 SimHeiplt.rcParams['axes.unicode_minus']=False #用来正常显示负号def get_dataMethod(orign_data,confidence,is_renew):    dau_count_array = []    course_count_array = []    play_time_array = []    # 进行1w次抽样，然后求取每次抽样的平均值    for i in range(10000):        bootsample = orign_data.sample(100, replace=True)        dau_count_mean = bootsample[bootsample['is_renew_m00'] == is_renew]['dau_count'].mean()  # dau均值        course_count_mean = bootsample[bootsample['is_renew_m00'] == is_renew]['course_count'].mean()  # 课程播放数量均值        play_time_mean = bootsample[bootsample['is_renew_m00'] == is_renew]['play_time'].mean()  # 课程播放时间均值        dau_count_array.append(dau_count_mean)        course_count_array.append(course_count_mean)        play_time_array.append(play_time_mean)    # 绘制统计数据分布曲线    plt.figure(figsize=(15, 5), dpi=80)    ax1 = plt.subplot(1, 3, 1)    ax1.set_title('dau均值')    plt.xlim(0,200)    plt.hist(dau_count_array, bins=100)    ax2 = plt.subplot(1, 3, 2)    ax2.set_title('播放课程数量均值')    plt.xlim(0,90)    plt.hist(course_count_array, bins=100)    ax2 = plt.subplot(1, 3, 3)    ax2.set_title('播放课程时长(小时)均值')    plt.xlim(0,160)    plt.hist(play_time_array, bins=100)    plt.show()    print (dau_count_array)    print (course_count_array)    print (play_time_array)    # 样本均值    dau_sample_mean = np.mean(dau_count_array)    # 计算输入数组中值的平均值的标准差    dau_sample_std = np.std(dau_count_array)    course_count_mean = np.mean(course_count_array)    course_count_std = np.std(course_count_array)    play_time_mean = np.mean(play_time_array)    play_time_std = np.std(play_time_array)    print ('dau均值区间：{},均值：{},标准差：{}'.format(st.norm.interval(confidence, loc=dau_sample_mean, scale=dau_sample_std),                                                 dau_sample_mean, dau_sample_std))    print ('看课数量均值区间：{} ,均值：{},标准差：{}'.format(st.norm.interval(confidence, loc=course_count_mean, scale=course_count_std),                                                  course_count_mean, course_count_std))    print ('看课时长(小时)均值区间：{} ,均值：{},标准差：{}'.format(st.norm.interval(confidence, loc=play_time_mean, scale=play_time_std),                                                  play_time_mean, play_time_std))    # 138.18169931669502 + 1.96(95%置信度z值) * 14.25 / 100   =  (110.24515696198162, 166.1182416714084)    # print (st.norm.interval(0.95, loc=sample_mean, scale=sample_std))def data_quality(orign_df):    plt.figure(figsize=(10,5),dpi=180)    orign_df = orign_df[orign_df['is_renew_m00']==0]    dau_counts = [0,1,10,50,100,150,200,500]    index_title = ['0~1','1~10','10~50','50~100','100~150','150~200','200以上']    df = pd.cut(orign_df['dau_count'],dau_counts,include_lowest=True,labels=index_title)    orign_df['dau区间'] = df    print (orign_df['dau区间'].value_counts())    series = orign_df['dau区间'].value_counts()    #为了画图按顺序来，重置index    series.index = index_title    fig = plt.figure(figsize=(10,10),dpi=80)    plt.pie(series.values,labels=series.index,autopct='%1.1f%%',startangle=90,counterclock=False)    plt.title('未续费人群dau分布')    plt.show()#处理如果有续费时间则续费状态改为1def mapStr(x):    is_renew_m00 = 1 if len(x)>0 else 0    return is_renew_m00#初始化创新学院续费率数据def cxxy_initData():    '''    #创新学院续费率    #创新学院2019-06人群在截止到2019-03月份(含3月份)dau，听课数量，听课时长数据    '''    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    path = os.path.join(PROJECT_ROOT,'data/创新学院续费率数据.xlsx')    orign_df = pd.read_excel(path,sheet_name='明细数据')    orign_df['play_time'] = orign_df['play_time'] / 60  # 变成小时    #填补空缺值    orign_df['re_new_time'] = orign_df['re_new_time'].fillna(value='')    orign_df['is_renew_m00'] = orign_df['re_new_time'].map(mapStr)    orign_df[['dau_count','course_count','play_time']] = orign_df[['dau_count','course_count','play_time']].fillna(value=0)    print (orign_df.head(10))    print (orign_df.info())    print (orign_df.describe())    return orign_df#初始化研习社续费率def yxs_initData():    # 1.通过名单统计，得出研习社当月到期人群中，续费和未续费人群    # 2.通过人群和时间来统计出对应人群的DAU，观看课程数量和观看课程时长    # 3.统计时间：    # 2019年 4月，5月，7月，8月，10月    # 2020年1月    # 研习社续费率    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    path = os.path.join(PROJECT_ROOT,'data/数据汇总.xlsx')    #创建一个集合，存放所有的数据    total_df = pd.DataFrame()    date_array = ['2019-04','2019-05','2019-07','2019-08','2019-10','2020-01']    for date in date_array:        print (date)        df = pd.read_excel(path, sheet_name='2019-05')        df['play_time'] = df['play_time'] / 60 #变成小时        df['日期'] = date        total_df = total_df.append(df)        print (df.head(3))    #获得所有的数据集合    print (total_df.head(3))    print (total_df.info())    get_dataMethod(total_df,confidence=0.95,is_renew=0)orign_df = cxxy_initData()data_quality(orign_df)# get_dataMethod(orign_df, confidence=0.95, is_renew=1)