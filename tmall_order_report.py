# coding:utf-8import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport osimport seaborn as snspd.options.mode.chained_assignment = None # 默认是'warn'plt.rcParams['font.sans-serif']=['Microsoft YaHei'] #用来正常显示中文标签字体。Microsoft YaHei 或 SimHeiplt.rcParams['axes.unicode_minus']=False #用来正常显示负号'''天猫订单综合分析本数据集共收集了发生在一个月内的28010条数据，包含以下：7个字段说明    订单编号：订单编号    总金额：订单总金额    买家实际支付金额：总金额 - 退款金额（在已付款的情况下）。金额为0（在未付款的情况下）    收货地址：各个省份    订单创建时间：下单时间    订单付款时间：付款时间    退款金额：付款后申请退款的金额。如无付过款，退款金额为0分析目的    订单每个环节的转化转化率    订单成交的时间（按天）趋势(按实际成交）    订单数在地图上的分布'''#获取文件地址def get_file_path(file_name):    PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))    path = os.path.join(PROJECT_ROOT, 'data/tmall_order_report/'+file_name)    return path#获取原始数据,return 数据+是否处理后def get_handle_data():    handle_path = get_file_path('tmall_order_report_handle.csv')    try:        handle_df = pd.read_csv(handle_path)    except IOError:        print('没有处理过的数据，读取原始数据')        path = get_file_path('tmall_order_report.csv')        orign_df = pd.read_csv(path)        watch_data(orign_df)        handle_df = handle_data(orign_df)        return handle_df    else:        print ('数据已经处理过，直接读取')        handle_df = pd.read_csv(handle_path)        return handle_df#观察数据def watch_data(orign_df):    #1.处理count异常值    df = orign_df.copy()    # 显示所有列    pd.set_option('display.max_rows', None)    pd.set_option('display.max_columns', None)    print (df.describe())    print (df.head(5))    #重复值为0    print (df.duplicated().sum())    #重复值    #订单付款时间 有2923个缺失值，属于正常现象，说明这些订单未付过款，无需处理    print (df.isnull().sum())#处理数据def handle_data(orign_df):    #1.处理count异常值    df = orign_df.copy()    #1.规范字段名称，其中'订单付款时间 '，'收货地址 '  带空格    df = df.rename(columns={'收货地址 ':'收货地址','订单付款时间 ':'订单付款时间'})    #保存处理后的数据    # path = get_file_path('tmall_order_report_handle.csv')    # df.to_csv(path,index=False)    # print ('保存处理数据后数据成功')    return df#转化率def analysis_1(handle_df):    df = handle_df.copy()    total_order_counts = df['订单编号'].count()    pay_order_counts = df[df['订单付款时间'].isnull()==False]['订单编号'].count()    pay_receive_order_counts = df[df['买家实际支付金额']>0]['订单编号'].count()    pay_all_order_counts = df[(df['买家实际支付金额']>0)&(df['退款金额']==0)].shape[0]    dic = {        '总订单数':total_order_counts,        '付款订单数':pay_order_counts,        '到款订单数':pay_receive_order_counts,        '全额到款订单数':pay_all_order_counts    }    print (dic)    df_convs = pd.Series(dic,name='订单数').to_frame()    df_convs['总体转化率'] = df_convs['订单数'] / df_convs.loc['总订单数','订单数']*100    df_convs['总体转化率'] = df_convs['总体转化率'].apply(lambda x:round(x,0))    df_convs['单一环节转化率'] = round(df_convs['订单数']/df_convs['订单数'].shift()*100,0)    print (df_convs)#整体订单趋势def analysis_2(handle_df):    df = handle_df.copy()    df['日期'] = df['订单创建时间'].str[8:10]    temp_df = df.groupby('日期')['订单编号'].count().to_frame()    print (temp_df)    fig = plt.figure(figsize=(15,10))    plt.plot(temp_df.index,temp_df['订单编号'],color='#800080',linestyle='-.')    plt.title('总订单趋势')    plt.xlabel('日期')    plt.ylabel('总订单数量')    for x,y in zip(temp_df.index,temp_df['订单编号']):        plt.text(x,y+20,y,fontsize=15)    plt.show()#主函数if __name__ == '__main__':    handle_df = get_handle_data()    analysis_2(handle_df)