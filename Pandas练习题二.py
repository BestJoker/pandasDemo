# coding:utf-8import pandas as pdimport numpy as npimport os'''一、数据拼接1、行堆叠① concat(objs, axis=0, join=‘outer’, join_axes=None, ignore_index=False,keys=None, levels=None, names=None, verify_integrity=False,copy=True)参数说明：objs: 拼接的series或dataframeaxis：拼接轴方向，默认为0，沿行拼接；若为1，沿列拼接join：默认外联’outer’，拼接另一轴所有的label，缺失值用NaN填充；内联’inner’，只拼接另一轴相同的label；join_axes: 指定需要拼接的轴的labels，可在join既不内联又不外联的时候使用ignore_index：对index进行重新排序keys：多重索引,便于区分来源表sort: 按值排序'''#Series使用s1 = pd.Series([0,1],index=['a','b'])s2 = pd.Series([2,3,4],index=['c','d','e'])s3 = pd.Series([5,6],index=['f','g'])# print (s1)# print (s2)# print (s3)print (pd.concat([s1,s2,s3],axis=1))s4 = pd.concat([s1,s3])print (s4)print (pd.concat([s1,s4],axis=1,join='inner'))print (pd.concat([s1,s4],axis=1,join_axes=[['a','c']]))print(pd.concat([s1, s2, s3], keys=['S1', 'S2', 'S3']))  # keys参数可以标注来源print ('-'*20)s1 = pd.Series([0,1,2],index=list('abc'))s2 = pd.Series([4,5],index=['d','e'])data = pd.concat([s1,s2],keys=['one','two'])print (data)print (data.unstack(1))print (data.unstack(0).stack())  # 如果有多层索引，可以用unstack()选择某个索引透视到行，如果有多个列索引，那也可以通过stack()选择哪个列透视到行print (data.unstack(0).stack(dropna=False)) #拆堆过程可能会产生Na,在stack()时可以选择dropna=False