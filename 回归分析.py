# coding:utf-8import pandas as pdimport numpy as npimport osimport matplotlib.pyplot as pltfrom sklearn.model_selection import train_test_split #这里是引用了交叉验证from sklearn.linear_model import LinearRegression  #线性回归'''#回归模型分析步骤根据预测目标，确定自变量和因变量绘制散点图，确定回归模型类型估计模型参数，建立回归模型对回归模型进行检验利用回归模型进行预测'''#让中文显示正常plt.rcParams['font.sans-serif']=['Microsoft YaHei'] #用来正常显示中文标签字体。Microsoft YaHei 或 SimHeiplt.rcParams['axes.unicode_minus']=False #用来正常显示负号PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))path = os.path.join(PROJECT_ROOT,'data/多元回归数据集.xlsx')orign_data = pd.read_excel(path)print (orign_data)def build_lr(orign_data):    X = orign_data[['百分比利率','抽取用户佣金']]    y = orign_data[['金融产品销售额']]    # 利用sklearn里面的包来对数据集进行划分，以此来创建训练集和测试集    # train_size表示训练集所占总数据集的比例    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=532)#选择20%为测试集    print ('训练集测试及参数')    print('X_train.shape={}\n y_train.shape ={}\n X_test.shape={}\n,  y_test.shape={}'.format(X_train.shape,                                                                                              y_train.shape,                                                                                              X_test.shape,                                                                                              y_test.shape))    linreg = LinearRegression()    #训练    model = linreg.fit(X_train,y_train)    print ('模型参数:')    print (model)    #训练后模型截距    print ('模型截距:')    print (linreg.intercept_)    #训练后模型权重（特征个数无变化），回归系数    print ('参数权重:')    print (linreg.coef_)    y_pred = linreg.predict(X_test)    sum_mean = 0    for i in range(len(y_pred)):        sum_mean += (y_pred[i] - y_test.values[i]) ** 2    sum_erro = np.sqrt(sum_mean / len(y_pred))    # 评价    # (1) 评价测度    # 对于分类问题，评价测度是准确率，但这种方法不适用于回归问题。我们使用针对连续数值的评价测度(evaluation metrics)。    # 这里介绍3种常用的针对线性回归的测度。    # 1)平均绝对误差(Mean Absolute Error, MAE)    # (2)均方误差(Mean Squared Error, MSE)    # (3)均方根误差(Root Mean Squared Error, RMSE)    # 这里我使用RMES。    #calculate RMSE，均方根误差    print ('RMSE by hand：',sum_erro)    #做ROC曲线    plt.figure()    plt.plot(range(len(y_pred)),y_pred,'b',label='predict')    plt.plot(range(len(y_pred)),y_test,'r',label='test')    plt.legend(loc='upper right') #显示图中的标签    plt.xlabel('金融产品销售额')    plt.ylabel('value of sales')    plt.show()    # R方检测    # 决定系数r平方    # 对于评估模型的精确度    # y误差平方和 = Σ(y实际值 - y预测值)^2    # y的总波动 = Σ(y实际值 - y平均值)^2    # 有多少百分比的y波动没有被回归拟合线所描述 = SSE/总波动    # 有多少百分比的y波动被回归线描述 = 1 - SSE/总波动 = 决定系数R平方    # 对于决定系数R平方来说1） 回归线拟合程度：有多少百分比的y波动刻印有回归线来描述(x的波动变化)    score =linreg.score(X_test,y_test)    print (score)build_lr(orign_data)